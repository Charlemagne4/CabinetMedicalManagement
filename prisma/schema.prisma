generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    salt          String?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime
    updatedAt DateTime @updatedAt

    role      Role        @default(user)
    Shift     Shift[]
    Operation Operation[]
    Credit    Credit[]
}

enum Role {
    user
    admin
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum oAuthProvider {
    discord
    github
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Shift {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    template   ShiftTemplate @relation(fields: [templateId], references: [id])
    templateId String        @db.ObjectId

    startTime DateTime
    endTime   DateTime?
    confirmed Boolean   @default(false)

    cashFund      CashFund?
    consultations Consultation[]
    recettes      Recette?
    expenses      Depense[]
    Operations    Operation[]
}

model ShiftTemplate {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String // "Morning", "Evening", etc.
    startHour Int // 8 for 08:00
    endHour   Int // 14 for 14:00
    type      ShiftType
    Shift     Shift[]
}

model CashFund {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    amount  Float
    shiftId String @unique @db.ObjectId
    shift   Shift  @relation(fields: [shiftId], references: [id])
}

enum ShiftType {
    MATIN
    SOIR
}

model Recette {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    date        DateTime
    totalAmount Float
    shiftId     String   @unique @db.ObjectId
    Shift       Shift    @relation(fields: [shiftId], references: [id])
}

model Consultation {
    id      String           @id @default(auto()) @map("_id") @db.ObjectId
    patient String
    amount  Float
    date    DateTime
    shiftId String?          @db.ObjectId
    type    ConsultationType
    credit  Credit?
    Shift   Shift?           @relation(fields: [shiftId], references: [id])

    // ðŸ‘‡ Mandatory link to Operation (must exist)
    operationId String    @unique @db.ObjectId
    Operation   Operation @relation(fields: [operationId], references: [id])
}

enum ConsultationType {
    CONSULTATION
    BILAN
}

model Depense {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    label   String
    amount  Float
    date    DateTime
    shiftId String   @db.ObjectId
    Shift   Shift    @relation(fields: [shiftId], references: [id])
}

model Credit {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    amount Float
    isPaid Boolean  @default(false)
    date   DateTime

    userId         String?      @db.ObjectId
    user           User?        @relation(fields: [userId], references: [id])
    // âœ… This is the only FK in the relation
    consultationId String       @unique @db.ObjectId
    consultation   Consultation @relation(fields: [consultationId], references: [id])
}

model Operation {
    id     String    @id @default(auto()) @map("_id") @db.ObjectId
    date   DateTime
    refId  String?   @db.ObjectId
    type   EntryType
    amount Float
    label  String

    // ðŸ‘‡ Optional reverse relation (not required)
    Consultation Consultation?

    shiftId String @db.ObjectId
    Shift   Shift  @relation(fields: [shiftId], references: [id])

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id])
}

enum EntryType {
    CONSULTATION
    DEPENSE
}
